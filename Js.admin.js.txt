class AdminPanel {
    constructor() {
        this.userManager = new UserManager();
        this.init();
    }

    init() {
        this.loadFinancialStats();
        this.loadUsersTable();
        this.loadPendingTransactions();
        this.loadPaymentMethods();
        this.setupEventListeners();
        this.loadUserDropdown();
    }

    loadFinancialStats() {
        const stats = this.userManager.getFinancialStats();
        document.getElementById('totalDeposits').textContent = '$' + stats.totalDeposits.toLocaleString();
        document.getElementById('totalWithdrawals').textContent = '$' + stats.totalWithdrawals.toLocaleString();
        document.getElementById('pendingDeposits').textContent = '$' + stats.pendingDeposits.toLocaleString();
        document.getElementById('pendingWithdrawals').textContent = '$' + stats.pendingWithdrawals.toLocaleString();
        document.getElementById('platformBalance').textContent = '$' + stats.platformBalance.toLocaleString();
    }

    loadUsersTable() {
        const users = this.userManager.getAllUsers();
        const tableBody = document.getElementById('usersTableBody');
        
        tableBody.innerHTML = users.map(user => `
            <tr>
                <td>${user.fullName}</td>
                <td>${user.email}</td>
                <td>$${user.balance ? user.balance.toLocaleString() : '0'}</td>
                <td>${user.accountPlan ? user.accountPlan.toUpperCase() : 'N/A'}</td>
                <td><span class="status-badge">${user.status}</span></td>
                <td>
                    <div class="action-buttons">
                        <button onclick="adminPanel.adjustUserBalance('${user.id}')" class="btn-small btn-warning">Adjust Balance</button>
                        <button onclick="adminPanel.viewUserTransactions('${user.id}')" class="btn-small btn-primary">View Transactions</button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    loadPendingTransactions() {
        const pendingTransactions = this.userManager.getPendingTransactions();
        const tableBody = document.getElementById('transactionsTableBody');
        
        tableBody.innerHTML = pendingTransactions.map(transaction => {
            const user = this.userManager.getUserById(transaction.userId);
            return `
                <tr class="transaction-pending">
                    <td>${user ? user.fullName : 'Unknown User'}</td>
                    <td>${transaction.type.toUpperCase()}</td>
                    <td>$${transaction.amount.toLocaleString()}</td>
                    <td>${new Date(transaction.createdAt).toLocaleDateString()}</td>
                    <td>${transaction.description}</td>
                    <td>
                        <div class="action-buttons">
                            ${transaction.type === 'deposit' ? 
                                `<button onclick="adminPanel.approveTransaction('${transaction.id}')" class="btn-small btn-success">Approve</button>` : 
                                `<button onclick="adminPanel.approveWithdrawal('${transaction.id}')" class="btn-small btn-success">Approve</button>`
                            }
                            <button onclick="adminPanel.declineTransaction('${transaction.id}')" class="btn-small btn-danger">Decline</button>
                        </div>
                    </td>
                </tr>
            `;
        }).join('');
    }

    loadPaymentMethods() {
        const methods = this.userManager.paymentMethods;
        const container = document.getElementById('paymentMethodsList');
        
        container.innerHTML = methods.map(method => `
            <div class="payment-method-card">
                <div style="display: flex; justify-content: space-between; align-items: start;">
                    <div>
                        <h3>${method.name}</h3>
                        <p>Type: ${method.type.toUpperCase()} | Status: 
                            <span style="color: ${method.status === 'active' ? 'green' : 'red'}">
                                ${method.status.toUpperCase()}
                            </span>
                        </p>
                        ${this.renderPaymentDetails(method)}
                    </div>
                    <div class="action-buttons">
                        <button onclick="adminPanel.editPaymentMethod('${method.id}')" class="btn-small btn-primary">Edit</button>
                        <button onclick="adminPanel.deletePaymentMethod('${method.id}')" class="btn-small btn-danger">Delete</button>
                    </div>
                </div>
            </div>
        `).join('');
    }

    renderPaymentDetails(method) {
        if (method.type === 'bank') {
            return `
                <div style="margin-top: 1rem;">
                    <p><strong>Bank:</strong> ${method.details.bankName}</p>
                    <p><strong>Account:</strong> ${method.details.accountName} - ${method.details.accountNumber}</p>
                    <p><strong>Routing:</strong> ${method.details.routingNumber} | <strong>SWIFT:</strong> ${method.details.swiftCode}</p>
                </div>
            `;
        } else if (method.type === 'crypto') {
            return `
                <div style="margin-top: 1rem;">
                    <p><strong>Wallet:</strong> ${method.details.walletAddress}</p>
                    <p><strong>Network:</strong> ${method.details.network}</p>
                </div>
            `;
        }
        return '';
    }

    loadUserDropdown() {
        const users = this.userManager.getAllUsers();
        const dropdown = document.getElementById('adjustUser');
        dropdown.innerHTML = '<option value="">Select User</option>' + 
            users.map(user => `
                <option value="${user.id}">${user.fullName} (${user.email}) - Balance: $${user.balance || 0}</option>
            `).join('');
    }

    approveTransaction(transactionId) {
        const adminNote = prompt('Enter approval note (optional):');
        try {
            this.userManager.approveTransaction(transactionId, adminNote || '');
            alert('Transaction approved successfully!');
            this.loadPendingTransactions();
            this.loadFinancialStats();
            this.loadUsersTable();
        } catch (error) {
            alert('Error: ' + error.message);
        }
    }

    declineTransaction(transactionId) {
        const adminNote = prompt('Enter reason for decline:');
        if (adminNote) {
            try {
                this.userManager.declineTransaction(transactionId, adminNote);
                alert('Transaction declined successfully!');
                this.loadPendingTransactions();
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    }

    adjustUserBalance(userId) {
        document.getElementById('adjustUser').value = userId;
        switchTab('financial');
    }

    showAddPaymentMethod() {
        document.getElementById('modalTitle').textContent = 'Add Payment Method';
        document.getElementById('paymentMethodForm').reset();
        document.getElementById('methodId').value = '';
        this.showModal();
    }

    editPaymentMethod(methodId) {
        const method = this.userManager.paymentMethods.find(m => m.id === methodId);
        if (method) {
            document.getElementById('modalTitle').textContent = 'Edit Payment Method';
            document.getElementById('methodId').value = method.id;
            document.getElementById('methodName').value = method.name;
            document.getElementById('methodType').value = method.type;
            document.getElementById('methodStatus').value = method.status;
            
            if (method.type === 'bank') {
                document.getElementById('bankName').value = method.details.bankName || '';
                document.getElementById('accountName').value = method.details.accountName || '';
                document.getElementById('accountNumber').value = method.details.accountNumber || '';
                document.getElementById('routingNumber').value = method.details.routingNumber || '';
                document.getElementById('swiftCode').value = method.details.swiftCode || '';
            } else if (method.type === 'crypto') {
                document.getElementById('walletAddress').value = method.details.walletAddress || '';
                document.getElementById('network').value = method.details.network || '';
            }
            
            this.showModal();
            this.toggleMethodDetails(method.type);
        }
    }

    deletePaymentMethod(methodId) {
        if (confirm('Are you sure you want to delete this payment method?')) {
            try {
                this.userManager.deletePaymentMethod(methodId);
                this.loadPaymentMethods();
                alert('Payment method deleted successfully!');
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    }

    showModal() {
        document.getElementById('paymentMethodModal').style.display = 'block';
    }

    hideModal() {
        document.getElementById('paymentMethodModal').style.display = 'none';
    }

    toggleMethodDetails(type) {
        document.getElementById('bankDetails').style.display = type === 'bank' ? 'block' : 'none';
        document.getElementById('cryptoDetails').style.display = type === 'crypto' ? 'block' : 'none';
    }

    setupEventListeners() {
        document.getElementById('adjustBalanceForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.processBalanceAdjustment();
        });

        document.getElementById('paymentMethodForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.savePaymentMethod();
        });

        document.getElementById('methodType').addEventListener('change', (e) => {
            this.toggleMethodDetails(e.target.value);
        });

        document.querySelector('.close').addEventListener('click', () => {
            this.hideModal();
        });

        setInterval(() => {
            this.loadFinancialStats();
            this.loadPendingTransactions();
        }, 30000);
    }

    processBalanceAdjustment() {
        const formData = new FormData(document.getElementById('adjustBalanceForm'));
        const userId = formData.get('userId');
        const type = formData.get('type');
        const amount = parseFloat(formData.get('amount'));
        const description = formData.get('description');

        if (!userId || !amount) {
            alert('Please fill all fields');
            return;
        }

        const adjustmentAmount = type === 'add' ? amount : -amount;
        
        try {
            this.userManager.updateUserBalance(userId, adjustmentAmount, 'adjustment', description);
            alert('Balance adjusted successfully!');
            document.getElementById('adjustBalanceForm').reset();
            this.loadUsersTable();
            this.loadFinancialStats();
            this.loadUserDropdown();
        } catch (error) {
            alert('Error: ' + error.message);
        }
    }

    savePaymentMethod() {
        const methodId = document.getElementById('methodId').value;
        const methodData = {
            name: document.getElementById('methodName').value,
            type: document.getElementById('methodType').value,
            status: document.getElementById('methodStatus').value,
            details: {}
        };

        if (methodData.type === 'bank') {
            methodData.details = {
                bankName: document.getElementById('bankName').value,
                accountName: document.getElementById('accountName').value,
                accountNumber: document.getElementById('accountNumber').value,
                routingNumber: document.getElementById('routingNumber').value,
                swiftCode: document.getElementById('swiftCode').value
            };
        } else if (methodData.type === 'crypto') {
            methodData.details = {
                walletAddress: document.getElementById('walletAddress').value,
                network: document.getElementById('network').value
            };
        }

        try {
            if (methodId) {
                this.userManager.updatePaymentMethod(methodId, methodData);
            } else {
                this.userManager.addPaymentMethod(methodData);
            }
            
            this.hideModal();
            this.loadPaymentMethods();
            alert('Payment method saved successfully!');
        } catch (error) {
            alert('Error: ' + error.message);
        }
    }
}

function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });

    document.getElementById(tabName + '-tab').classList.add('active');
    event.target.classList.add('active');
}

function exportUsers() {
    const userManager = new UserManager();
    userManager.exportUsersToCSV();
}

function refreshUsers() {
    adminPanel.loadFinancialStats();
    adminPanel.loadUsersTable();
    adminPanel.loadPendingTransactions();
    adminPanel.loadPaymentMethods();
    adminPanel.loadUserDropdown();
    alert('Data refreshed successfully!');
}

let adminPanel;
if (document.getElementById('usersTableBody')) {
    adminPanel = new AdminPanel();
}

if (window.location.pathname.includes('admin.html')) {
    const currentUser = JSON.parse(localStorage.getItem('current_user'));
    if (!currentUser || currentUser.role !== 'admin') {
        alert('Access denied. Admin privileges required.');
        window.location.href = 'login.html';
    }
}